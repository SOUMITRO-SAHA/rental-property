generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_TEST")
}

model User {
  id                   Int             @id @default(autoincrement())
  name                 String
  email                String          @unique
  password             String?
  imageUrl             String          @default("")
  token                String?
  role                 AuthRoles       @default(USER)
  forgotPasswordToken  String?
  forgotPasswordExpiry DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  chatId               Int?
  appointments         Appointment[]
  receivedMessages     Message[]       @relation("ReceivedMessages")
  sentMessages         Message[]       @relation("SentMessages")
  messageStatus        MessageStatus[]
  notifications        Notification[]
  properties           Property[]
  tickets              Ticket[]
  chat                 Chat[]          @relation("ChatToUser")

  @@index([chatId])
}

model Amenity {
  id              Int               @id @default(autoincrement())
  name            String
  icon            String            @default("")
  PropertyAmenity PropertyAmenity[]
}

model Property {
  id                 Int               @id @default(autoincrement())
  userId             Int
  numberOfBedrooms   Int               @default(0)
  numberOfBathrooms  Int               @default(0)
  possession         String            @default("Immediate")
  hasBalcony         Boolean           @default(false)
  hasPowerBackup     Boolean           @default(false)
  propertyType       String            @default("Residential")
  isApartment        Boolean           @default(false)
  buildingAge        String            @default("New")
  floor              String            @default("Ground Floor")
  totalFloor         String            @default("1")
  buildingType       String            @default("Other")
  furnishingStatus   String            @default("Unfurnished")
  expectedRent       String            @default("Contact for rent")
  expectedDeposit    String            @default("Contact for deposit")
  rentNegotiable     Boolean           @default(true)
  maintenanceCharges Float             @default(0)
  availableDate      DateTime          @default(now())
  gatedSecurity      Boolean           @default(false)
  ownershipType      String            @default("Freehold")
  flooring           String            @default("Other")
  hasParking         Boolean           @default(false)
  carpetArea         Float             @default(0)
  facing             String            @default("Other")
  description        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  likes              Int               @default(0)
  views              Int               @default(0)
  city               String?
  country            String?
  postalCode         String?
  state              String?
  streetAddress      String?
  buildupArea        Float             @default(0)
  address            String?
  brokerageCharge    String?
  otherRooms         String?
  phone              String            @default("")
  Photo              Photo[]           @relation("PropertyPhotos")
  user               User              @relation(fields: [userId], references: [id])
  amenities          PropertyAmenity[]

  @@index([userId], map: "Property_userId_fkey")
}

model PropertyAmenity {
  id         Int      @id @default(autoincrement())
  propertyId Int
  amenityId  Int
  amenity    Amenity  @relation(fields: [amenityId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@index([amenityId], map: "PropertyAmenity_amenityId_fkey")
  @@index([propertyId], map: "PropertyAmenity_propertyId_fkey")
}

model Photo {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation("PropertyPhotos", fields: [propertyId], references: [id])

  @@index([propertyId], map: "Photo_propertyId_fkey")
}

model Appointment {
  id          Int      @id @default(autoincrement())
  userId      Int
  startTime   DateTime
  endTime     DateTime
  description String?
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Appointment_userId_fkey")
}

model Ticket {
  id          Int          @id @default(autoincrement())
  userId      Int
  subject     String
  description String
  status      TicketStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId], map: "Ticket_userId_fkey")
}

model Banner {
  id       Int     @id @default(autoincrement())
  imageUrl String?
}

model Feedback {
  id           Int      @id @default(autoincrement())
  email        String?
  fullName     String?
  mobileNumber String?
  message      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Chat {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  description  String?
  isGroupChat  Boolean   @default(false)
  name         String?
  messages     Message[]
  participants User[]    @relation("ChatToUser")
}

model Message {
  id            Int             @id @default(autoincrement())
  content       String          @db.Text
  senderId      Int
  receiverId    Int
  chatId        Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  attachments   Attachment[]
  Chat          Chat?           @relation(fields: [chatId], references: [id])
  receiver      User            @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender        User            @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  messageStatus MessageStatus[]
  Notification  Notification[]

  @@index([chatId], map: "Message_chatId_fkey")
  @@index([receiverId], map: "Message_receiverId_fkey")
  @@index([senderId], map: "Message_senderId_fkey")
}

model Attachment {
  id        Int      @id @default(autoincrement())
  url       String
  localPath String
  messageId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId], map: "Attachment_messageId_fkey")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  messageId Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([messageId], map: "Notification_messageId_fkey")
  @@index([userId], map: "Notification_userId_fkey")
}

model MessageStatus {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([messageId], map: "MessageStatus_messageId_fkey")
  @@index([userId], map: "MessageStatus_userId_fkey")
}

enum AuthRoles {
  USER
  ADMIN
  MANAGER
  TENDER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
